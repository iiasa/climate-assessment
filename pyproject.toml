[tool.poetry]
name = "climate-assessment"
version = "0.1.4a0"
description = "Climate assessment of long-term emissions pathways: IPCC AR6 WGIII version"
authors = [
    "Jarmo S. Kikstra <kikstra@iiasa.ac.at>",
    "Zebedee Nicholls <zebedee.nicholls@climate-energy-college.org>",
    "Jared Lewis <jared.lewis@climate-resource.com>",
    "Christopher J. Smith <C.J.Smith1@leeds.ac.uk>",
    "Robin D. Lamboll <r.lamboll@imperial.ac.uk>",
    "Edward Byers <byers@iiasa.ac.at>",
    "Marit Sandstad <marit.sandstad@cicero.oslo.no>",
    "Laura Wienpahl <wienpahl@iiasa.ac.at>",
    "Philip Hackstock <hackstock@iiasa.ac.at>",
]
readme = "README.rst"
packages = [
    {include = "climate_assessment", from = "src"},
]
keywords = ["climate", "integrated assessment", "emissions", "temperature", "IPCC"]
license = "MIT License"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
]
homepage = "https://github.com/iiasa/climate-assessment"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
aneris_iamc = "==0.3.1"
fair = "==1.6.2"
ixmp4 = ">=0.8.3"
joblib = "==1.3.2"
openscm-runner = "==0.12.1"
pandas = "==2.2.2"
pooch = "==1.8.0"
pyam-iamc = ">=2.2.2"
pymagicc = "==2.1.5"
scmdata = "==0.17.0"
silicone = "==1.3.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
pytest-cov = "^5.0.0"

[tool.poetry.group.tests.dependencies]
pytest = "^8.1.1"


[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = [
    "nightly: Slow-running nightly tests.",
    "wg3: Tests for exact reproduction of WG3 database.",
]
addopts = [
    "-m",
    "not nightly and not wg3",
    "--import-mode=importlib",
    "--ignore=tests/test-data"
]

[tool.ruff]
src = ["src"]
target-version = "py39"
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # pyflakes
    "I",  # isort
    "D",  # pydocstyle
    "PL",  # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy rules
    "RUF",  # ruff specifics
    "UP",  # pyupgrade
    "S",  # flake8-bandit
    # pandas support via pandas-vet. In some cases we will want to disable
    # this because it can lead to too many false positives.
    "PD",
]
unfixable = [
    "PD002",  # Disable autofix for inplace as this often introduces bugs
]
ignore = [
    "D200",  # One-line docstring should fit on one line with quotes
    "D400",  # First line should end with a period
    "D105",  # Missing docstring in magic method
    "UP007",
    "PD011",  # Ruff confused about APIs
    # All below here should be reinstated at some point
    "PLR0913",
    "E501",
    "PLW0129",
    "RUF005",
    "PD002",
    "PLW2901",
    "PD901",
    "S324",
    "PLR0915",
    "PLR0912",
    "TRY003",
    "D401",
    "D205",
    "PD003",
    "D404",
    "D103",
    "TRY200",
    "D100",
    "S113",
    "PD101",
    "D104",
    "PLR5501",
    "PD010",
    "TRY300",
    "PLR2004",
    "RUF015",
    "D414",
    "D101",
    "D102",
]
# Provide some leeway for long docstring, this is otherwise handled by black
line-length = 88

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.per-file-ignores]
"test*.py" = [
    "D",  # Documentation not needed in tests
    "S101",  # S101 Use of `assert` detected
    "PLR2004" # Magic value used in comparison
]
"notebooks/*" = [
    "D100",  # Missing docstring at the top of file
    "E402",  # Module level import not at top of file
    "S101",  # Use of `assert` detected
]
"scripts/*" = [
    "S101",  # S101 Use of `assert` detected
]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.ruff.pydocstyle]
convention = "numpy"
